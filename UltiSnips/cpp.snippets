snippet cp "Normal template" b
#include <bits/stdc++.h>
using namespace std;
						
#define fast_cin() ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define endl '\n'
#define int long long

int32_t main() {
	fast_cin();  
	$0
	return 0;
}
endsnippet

snippet testcase "Normal testcase" b
#include <bits/stdc++.h>
using namespace std;
						
#define fast_cin() ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define endl '\n'
#define int long long

void testcase() {
	$0	
}
				
int32_t main() {
	fast_cin();  
	int T; cin >> T;
	while (T--) {
		testcase();
	}
	return 0;
}
endsnippet

snippet tool "Debugger"
#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct debug {
 #ifdef XOX
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
  ris << "(" << d.first << ", " << d.second << ")";
}
sim dor(rge<c> d) {
  *this << "[";
  for (auto it = d.b; it != d.e; ++it)
	*this << ", " + 2 * (it == d.b) << *it;
  ris << "]";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
endsnippet

snippet gcc "Kickstart / CodeJam" b
#include <bits/stdc++.h>
using namespace std;
						
#define fast_cin() ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)
#define endl '\n'
#define int long long

void testcase() {
	$0	
}
				
int32_t main() {
	fast_cin();  
	int T; cin >> T;
	for (int i = 1; i <= T; ++i) {
		cout << "Case #" << i << ": ";
		testcase();
	}
	return 0;
}
endsnippet

snippet hashing "Struct-Hashing" b
const int mod = 1e9 + 9, pw = 31;

struct hsh_str {
	vector<int> h, p;
	hsh_str(string s) {
		int n = s.size();
		h.resize(n), p.resize(n);
		h[0] = s[0] - 'a' + 1, p[0] = 1;
		for (int i = 1; i < n; ++i) {
			h[i] = ((h[i - 1] * pw) % mod + (s[i] - 'a' + 1)) % mod;
			p[i] = (p[i - 1] * pw) % mod;
		}
	}
	int get(int l, int r) {
		int res = h[r];
		if (l > 0) res -= (h[l - 1] * p[r - l + 1]) % mod;
		if (res < 0) res += mod;
		return res;
	}
	int all() {
		return h[(int)h.size() - 1];
	}
};
endsnippet

snippet kmp "prefix and count" b
vector<int> prefix_function(string s) {
	int n = s.size();
	vector<int> pi(n, 0);
	for (int i = 1; i < n; i++) {
		int j = pi[i - 1];
		while (j > 0 && s[i] != s[j])
			j = pi[j - 1];
		if (s[i] == s[j])
			j++;
		pi[i] = j;
	}
	return pi;
}

vector<int> count_prefixes(string s, vector<int> &pi) {
	int n = s.size();
	vector<int> cntpi(n + 1, 0);
	for (int i = 0; i < n; i++) {
		cntpi[pi[i]]++;
	}
	for (int i = n - 1; i > 0; i--) {
		cntpi[pi[i - 1]] += cntpi[i];
	}
	for (int i = 0; i <= n; i++) {
		cntpi[i]++;
	}
	return cntpi;
}
endsnippet

snippet fenwick "Fenwick tree Struct" b
struct FenwickTree {
	int n, lg;
	vector<int> f;
	FenwickTree(int sz) {
		n = sz + 5, lg = (int)log2(sz) + 1;
		f.resize(sz + 5, 0);
	}
	void update(int idx, int val) {
		while (idx < n) {
			f[idx] += val;
			idx += (idx & -idx);
		}
	}
	int get(int idx) {
		int res = 0;
		while (idx > 0) {
			res += f[idx];
			idx -= (idx & -idx);
		}
		return res;
	}
	int get(int l, int r) {
		if (l > r) return 0;
		return get(r) - get(l - 1);
	}
	int lower_bound(int val) {
		int sum = 0, pos = 0, cur = lg;
		while (cur >= 0) {
			if (pos + (1LL << cur) < n && sum + f[pos + (1LL << cur)] < val) {
				pos += (1LL << cur);
				sum += f[pos];
			}
			--cur;
		}
		return pos + 1;
	}
	int upper_bound(int val) {
		return lower_bound(val + 1);
	}
};
endsnippet

snippet seive "Linear Seive" b
const int N = 1e7 + 5;

int lp[N + 5];
vector<int> pr;

void seive() {
	for (int i = 2; i < N; ++i) {
		if (!lp[i]) {
			lp[i] = i;
			pr.push_back(i);
		}
		for (int j = 0; j < (int)pr.size() and pr[j] <= lp[i] and i * pr[j] < N; ++j)
			lp[i * pr[j]] = pr[j]; 
	}
}
endsnippet

snippet modulo_inverse "Factorial mod" b
const int N = 5e5 + 5, mod = 1e9 + 7;

int fac[N], inv[N], inv_fac[N];

int binpow(int x, int y) {
	int res = 1LL;
	x %= mod;
	while (y) {
		if (y & 1) res = (res * x) % mod;
		y >>= 1;
		x = (x * x) % mod;
	}
	return res;
}

int mod_inv(int x) {
	return binpow(x, mod - 2);
}

void initFacs() {
	fac[0] = 1;
	for (int i = 1; i < N; i++)
		fac[i] = (i * fac[i - 1]) % mod;
	inv[1] = 1;
	for (int i = 2; i < N; i++)
		inv[i] = (mod - (mod / i) * inv[mod % i]) % mod;
	inv_fac[N - 1] = mod_inv(fac[N - 1]);
	for (int i = N - 2; i >= 0; i--) {
		inv_fac[i] = (inv_fac[i + 1] * (i + 1)) % mod;
	}
}

int choose(int n, int r) {
	if (n < r) return 0;
	return (fac[n] * ((inv_fac[r] * inv_fac[n - r]) % mod)) % mod;
}
endsnippet

snippet power "Binary Expo" b
int binpow(int x, int y) {
	int res = 1LL;
	x %= mod;
	while (y) {
		if (y & 1) res = (res * x) % mod;
		y >>= 1;
		x = (x * x) % mod;
	}
	return res;
}

int mod_inv(int x) {
	return binpow(x, mod - 2);
}
endsnippet

snippet AhoCorrasick "AhoCorrasick using bfs" b
const int K = 26;

struct Vertex {
	int next[K];
	bool terminal = false;
	int terminal_idx = -1, p = -1;
	char pch;
	int depth = 0, link = 0;
	int next_terminal = 0;
	int go[K];
	Vertex(int p = -1, char ch = '$', int depth = 0) : p(p), pch(ch), depth(depth) {
		fill(begin(next), end(next), 0);
		fill(begin(go), end(go), 0);
	}
};

vector<Vertex> t(1);

void add_string(const string &s, int idx) {
	int v = 0;
	for (char ch : s) {
		int c = ch - 'a';
		if (!t[v].next[c]) {
			t[v].next[c] = (int)t.size();
			t.emplace_back(v, ch, t[v].depth + 1);
		} 
		v = t[v].next[c];
	}
	t[v].terminal = true;
	t[v].terminal_idx = idx;
}

void push_links() {
	queue<int> q;
	q.push(0);
	while (!q.empty()) {
		int v = q.front();
		q.pop();
		auto &cur = t[v];
		auto &link = t[cur.link];
		cur.next_terminal = link.terminal ? cur.link : link.next_terminal;
		for (int c = 0; c < K; ++c) {
			if (cur.next[c]) {
				t[cur.next[c]].link = v ? link.next[c] : 0;
				q.push(cur.next[c]);
			} else {
				cur.next[c] = link.next[c];
			}
		}
	}
}

int transition(int idx, char c) {
	return t[idx].next[c - 'a'];
}

Vertex const& getInfo(int idx) {
	return t[idx];
}
endsnippet

snippet sparsetable "for min queries" b
struct SparseTable {
	vector<vector<int>> sp;
	vector<int> lg;
	SparseTable(vector<int> arr) {
		int n = arr.size(), N = n + 14;
		lg.resize(N, 0);
		for (int i = 2; i < N; ++i) {
			lg[i] = 1 + lg[i / 2];
		}
		sp.resize(N, vector<int>(lg[n] + 2));
		for (int i = 0; i < n; ++i) sp[i][0] = arr[i];
		for (int j = 2; j <= lg[n]; ++j) {
			for (int i = 0; i + (1 << j) <= n; ++i) {
				sp[i][j] = f(sp[i][j - 1], sp[i + (1 << (j - 1))][j - 1]);
			}
		}
	}
	int query(int l, int r) {
		if (l > r) return 0;
		int j = lg[r - l + 1];
		return f(sp[l][j], sp[r - (1 << j) + 1][j]);
	}
	int f(int a, int b) {
		return min(a, b);
	}
};
endsnippet
